{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://facets.cloud/assets/fsdl/application.schema.json",
  "title": "Application",
  "description": "Facets Stack Definition for Applications",
  "type": "object",
  "properties": {
    "size": {
      "type": "string",
      "description": "Size as per sizing.json, determines number of VCPUs and Memory"
    },
    "deploymentStrategy": {
      "type": "string",
      "description": "A deployment strategy determines the deployment process. E.g. Rolling Recreate",
      "enum": [
        "RollingUpdate",
        "ReCreate"
      ]
    },
    "lbType": {
      "type": "string",
      "description": "This setting determines kind of LB to be used",
      "enum": [
        "internal"
      ]
    },
    "elbIdleTimeoutSeconds": {
      "description": "This setting allows you to specify the length of time that a connection should remain open while in an idle state.",
      "type": "integer"
    },
    "secretFileMounts": {
      "type": "array",
      "title": "secretFileMounts",
      "description": "Key Values to be injected as a secret.",
      "items": {"type": "string"}
    },
    "protocolGroup": {
      "type": "string",
      "description": "Used on the service to specify the protocol spoken by the backend (pod) behind a listener.",
      "enum": [
        "http",
        "tcp"
      ]
    },
    "scaling": {
      "type": "object",
      "title": "scaling",
      "description": "This Section allows you to configure autoscaling features of your application",
      "properties": {
        "hpaEnabled": {
          "type": "boolean",
          "description": "The Horizontal Pod Autoscaler automatically scales the number of Pods in a replication controller, deployment, replica set or stateful set based on observed CPU utilization"
        },
        "hpaMinReplicas": {
          "type": "integer",
          "description": "Minimum count of replicas which should always be running"
        },
        "hpaMaxReplicas": {
          "type": "integer",
          "description": "Maximum count of replicas which this application can scale upto"
        },
        "hpaMetricThreshold": {
          "type": "integer",
          "description": "Threshold for the metric value (Default is CPU) on which to spawn a new replica. "
        }
      },
      "required": [
        "hpaEnabled",
        "hpaMinReplicas",
        "hpaMaxReplicas",
        "hpaMetricThreshold"
      ]
    },
    "liveness": {
      "type": "object",
      "title": "liveness",
      "description": "This section is to decribe the liveness probe for an application. Liveness probes are used to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. Restarting a container in such a state can help to make the application more available despite bugs.",
      "properties": {
        "enableLivenessHTTP": {
          "type": "boolean"
        },
        "livenessHTTPEndpoint": {
          "type": "string"
        },
        "livenessPort": {
          "type": "integer"
        },
        "livenessInitialDelay": {
          "type": "integer"
        },
        "livenessTimeout": {
          "type": "integer"
        },
        "livenessFailureThreshold": {
          "type": "integer"
        },
        "livenessPeriod": {
          "type": "integer"
        },
        "livenessSuccessThreshold": {
          "type": "integer"
        }
      },
      "required": [
        "livenessPort",
        "livenessInitialDelay",
        "livenessTimeout",
        "livenessFailureThreshold",
        "livenessPeriod",
        "livenessSuccessThreshold"
      ]
    },
    "readiness": {
      "type": "object",
      "title": "readiness",
      "description": "This section is to describe the readiness probe for an application. The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.",

      "properties": {
        "enableReadinessHTTP": {
          "type": "boolean"
        },
        "readinessHTTPEndpoint": {
          "type": "string"
        },
        "readinessInitialDelay": {
          "type": "integer"
        },
        "readinessFailureThreshold": {
          "type": "integer"
        },
        "readinessSuccessThreshold": {
          "type": "integer"
        },
        "readinessPort": {
          "type": "integer"
        },
        "readinessTimeout": {
          "type": "integer"
        },
        "readinessPeriod": {
          "type": "integer"
        }
      },
      "required": [
        "readinessInitialDelay",
        "readinessFailureThreshold",
        "readinessSuccessThreshold",
        "readinessPort",
        "readinessTimeout",
        "readinessPeriod"
      ]
    },
    "ports": {
      "type": "array",
      "title": "ports",
      "description": "All the ports the application interacts on",

      "items": [
        {
          "type": "object",
          "title": "items",
          "properties": {
            "name": {
              "type": "string"
            },
            "containerPort": {
              "type": "integer"
            },
            "lbPort": {
              "type": "integer"
            }
          },
          "required": [
            "name",
            "containerPort",
            "lbPort"
          ]
        }
      ]
    },
    "build": {
      "type": "object",
      "title": "build",
      "description": "This section describes how to fetch build for this application",
      "properties": {
        "ci": {
          "type": "string",
          "description": "The artifactory name from which the builds are fetched, or external_image with fixed images"
        },
        "id": {
          "type": "string",
          "description": "The id of the build in the artifactory."

        }
      },
      "required": [
        "ci",
        "id"]
    },
    "credentialRequests": {
      "type": "object",
      "title": "credentialRequests",
      "description": "This section is to lineup all access request for this application to all databases and cloud resources ",
      "properties": {
        "dbs": {
          "type": "object",
          "title": "dbs",
          "properties": {
            "mysql": {
              "type": "array",
              "title": "mysql",
              "items": [
                {
                  "type": "object",
                  "title": "mysqlElement",
                  "properties": {
                    "resourceType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "permission": {
                      "type": "string"
                    },
                    "environmentVariables": {
                      "type": "array",
                      "title": "environmentVariables",
                      "items": [
                        {
                          "type": "object",
                          "title": "environmentVariableElement",
                          "properties": {
                            "userName": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "userName",
                            "password"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "resourceType",
                    "resourceName",
                    "permission",
                    "environmentVariables"
                  ]
                }
              ]
            },
            "mongo": {
              "type": "array",
              "title": "mongo",
              "items": [
                {
                  "type": "object",
                  "title": "mongoElement",
                  "properties": {
                    "resourceType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "permission": {
                      "type": "string"
                    },
                    "environmentVariables": {
                      "type": "array",
                      "title": "environmentVariables",
                      "items": [
                        {
                          "type": "object",
                          "title": "environmentVariableElement",
                          "properties": {
                            "userName": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "userName",
                            "password"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "resourceType",
                    "resourceName",
                    "permission",
                    "environmentVariables"
                  ]
                }
              ]
            }
          },
          "required": [
            "mysql",
            "mongo"
          ]
        },
        "queues": {
          "type": "object",
          "title": "queues",
          "properties": {
            "rabbitmq": {
              "type": "array",
              "title": "rabbitmq",
              "items": [
                {
                  "type": "object",
                  "title": "rabbitmqElement",
                  "properties": {
                    "resourceType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "permission": {
                      "type": "string"
                    },
                    "environmentVariables": {
                      "type": "array",
                      "title": "environmentVariables",
                      "items": [
                        {
                          "type": "object",
                          "title": "environmentVariableElement",
                          "properties": {
                            "userName": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "userName",
                            "password"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "resourceType",
                    "resourceName",
                    "permission",
                    "environmentVariables"
                  ]
                }
              ]
            }
          },
          "required": [
            "rabbitmq"
          ]
        },
        "cloud": {
          "type": "array",
          "title": "cloud",
          "items": [
            {
              "type": "object",
              "title": "cloudElement",
              "properties": {
                "resourceType": {
                  "type": "string"
                },
                "resourceName": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                }
              },
              "required": [
                "resourceType",
                "resourceName",
                "permission"
              ]
            }
          ]
        }
      },
      "required": [
        "dbs",
        "queues",
        "cloud"
      ]
    },
    "environmentVariables": {
      "type": "object",
      "title": "environmentVariables",
      "description": "This section is to define all the environment variables to be used in application runtime",

      "properties": {
        "static": {
          "type": "object",
          "title": "static",
          "description": "Define all static environment variables for this application here as key value pairs. These are typically tuning parameters for your applications that can be changed from environment to environment",
          "properties": {

          },
          "required": [
          ]
        },
        "dynamic": {
          "type": "object",
          "title": "dynamic",
          "properties": {
            "type": "object",
            "SERVICE_ENDPOINT": {
              "type": "object",
              "title": "Service Endpoint",
              "properties": {
                "resourceType": {
                  "type": "string"
                },
                "resourceName": {
                  "type": "string"
                },
                "attribute": {
                  "type": "string"
                }
              },
              "required": [
                "resourceType",
                "resourceName",
                "attribute"
              ]
            }
          },
          "required": [
          ]
        }
      },
      "required": [
        "static",
        "dynamic"
      ]
    },
    "k8s_service_names": {
      "type": "array",
      "title": "k8s_service_names",
      "description": "The service name to be used in kubernetes with which application may be discovered, default is <filename(without extension)>.default",
      "items": [
      ]
    },
    "ingress_rules": {
      "type": "array",
      "title": "ingress_rules",
      "description": "This section is to map applications with public facing lbs by specifying their path/ subdomain based router configurations",

      "items": [
        {
          "type": "object",
          "title": "ingress_rule_Element",
          "properties": {
            "ingress": {
              "type": "string",
              "description": "Name of the defined ingress on which this application needs to be mapped. (Double check the name in ingress directory.)"
            },
            "path": {
              "type": "string"
            },
            "targetPort": {
              "type": "integer"
            },
            "domainPrefix": {
              "type": "string"
            }
          },
          "required": [
            "ingress",
            "path",
            "targetPort",
            "domainPrefix"
          ]
        }
      ]
    },
    "resourceAllocationStrategy": {
      "type": "string"
    }
  },
  "required": [
    "size",
    "deploymentStrategy",
    "lbType",
    "elbIdleTimeoutSeconds",
    "secretFileMounts",
    "protocolGroup",
    "scaling",
    "liveness",
    "readiness",
    "ports",
    "build",
    "credentialRequests",
    "environmentVariables",
    "k8s_service_names",
    "ingress_rules",
    "resourceAllocationStrategy"
  ]
}
